Docker Commands
--------------------
Working on Images
-------------------------
1 To download a docker image  ------->>docker pull image_name 
2 To see the list of docker images ---->  docker image ls (or) docker images
3 To delete a docker image from docker host ------>docker rmi image_name/image_id 
4) To upload a docker image into docker hub -----> docker push image_name 
5) To build an image from a customised container -->docker   commit  container_name/container_id     new_image_name 
6) To create an image from docker file --->docker build -t    new_image_name 
7) To search for a docker image --->docker search image_name 
8)  To delete all images that are not attached to containers --->docker system prune -a 

Working on containers
-----------------------------
9) To see the list of all running continers ---->docker  container  ls 
10) To see the list of running and stopped containers --->docker   ps -a 
11) To start a container ----->docker  start  container_name/container_id 
12) To stop a running container ----->docker stop   container_name/container_id 
13) To restart a running container ---->docker restart container_name/container_id (or)___To restart after 10 seconds ----->docker restart  -t  10  container_name/container_id 
14) To delete a stopped container --->docker  rm  container_name/container_id
15) To delete a running container --->docker  rm  -f  container_name/container id 
16) To stop all running containers ---->docker stop $(docker ps -aq) 
17) To restart all containers ---->docker restart $(docker ps -aq) 
18) To remove all stopped containers --->docker rm $(docker ps -aq) 
19) To remove all contianers(running and stopped) --->docker rm -f  $(docker ps -aq) 
20) To see the logs generated by a container  ---->docker logs container_name/container_id 
21) To see the ports used by a container --->docker port container_name/container_id 
22) To get detailed info about a container ---->docker inspect container_name/container_id 
23) To go into the shell of a running contianer which is moved into background ---->docker attach container_name/container id 
24) To execute anycommand in a container --->docker exec -it container_name/container_id command
   Eg: To launch the bash shell in a contianer 
   docker exec -it container_name/container_id    bash 
25) To create a container from a docker image  ( imp )---->docker run image_name   

Run command options:-
================== 

-it 	for opening an interactive terminal in a container 
--name 	Used for giving a name to a container 
-d 	Used for running the container in detached mode as a background process 
-e 	Used for passing environment varaibles to the container 
-p 	Used for port mapping between port of container with the dockerhost port.
-P 	Used for automatic port mapping ie, it will map the internal port of the container 
                with some port on host machine. 
               This host port will be some number greater than 30000 
-v 	Used for attaching a volume to the container 
--volumes-from 	 Used for sharing volume between containers 
--network 	Used to run the contianer on a specific network 
--link 		Used for linking the container for creating a multi container architecture 
--memory  	Used to specify the maximum amount of ram that the container can use 


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
in practicals:-
===============
1).To download tomcat image----->#docker pull tomee (or)  # docker pull ubuntu (or) #docker pull jenkins
		
2).TO create a container from an image---> docker run --name mytomcat  -p   7070:8080   tomee (or) for detaching mode (docker run -d --name mytomcat  -p   7070:8080   tomee)

3). performing auto maping and pulling image automatically------> # docker run --name  appserver  -P  -d  nginx 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Multi container architecture using docker:-
==========================================
5).This can be done in  2  ways------>1) --link  , 2)docker-compose
1)  --link option:-
==================
This is a feature of docker using which we can create multicontainer architecture using --link command

Docker compose:-
================
This is a feature of docker using which we can create multicontainer architecture using yaml files

Installing Docker compose:-
==========================
1) Open https://docs.docker.com/compose/install/
2) Go to linux section
   Copy and pase the below two commands
# sudo curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
# sudo chmod +x /usr/local/bin/docker-compose
# docker-compose  --version
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++===
Docker volumes:-
===============
# docker run --name c1 -it -v /data centos  ( v option is used to attach volume)
docker volume containers:-
=========================
#  docker run --name  c2  -it  --volumes-from c1  centos   ( v option is used to getting volume from other container)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Creating customized docker images:-
=================================
type 1 - commit command:-
         ---------------
         #docker commit   c1   myubuntu
type 2 - using docker file:-
         ------------------
Using docker file:-
==================
1) FROM         ---  used to specify the base image from which the docker file has to be created.
2) MAINTAINER   --- This represents name of the organization or the author who created this docker file.
3) CMD          --- This is used to specify the initial command that should be executed when the container 	starts.
4) ENTRYPOINT   --- used to specify the default process that should be executed when container starts.It can also be used for accepting arguments from the CMD instruction.
5) RUN          --- Used for running linux commands within the container. It is generally helpful for installing the software in the container.
6) USER         ---      used to specify the default user who should login into the container.
7) WORKDI       ---  Used to specify default working directory in the container
8) COPY         ---  Copying the files from the host machine to the container.
9) ADD          --- Used for copying files  from host to container, it can also be used for downloading files from remote servers.
10) ENV         ---  used for specifying the environment variables that should be passed to the container.
EXPOSE          --- Used to specify the internal port of the container
VOLUME          ---  used to specify the default volume that should be attached to the container.
LABEL           ---  used for giving label to the container
STOPSIGNAL      --- Used to specify the key sequences that have to be passed in order to stop the container.

****syntax -----> # docker build -t  mycentos  . 

git configuration:-
=================
git config --global user.name "saikumar"
git config --global user.email "saikumar37910@gmail.com"


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++=
Container orchestration:-
=======================
1).chainging hostname    ---->  vim /etc/hostname (open this file chainge ip address to manager)
2).Command to install docker swarm  in manager machine   -------> # docker swarm init --advertise-addr  private_ip_of_manager
3).Copy the  docker swarm join command in the log and run in the worker1  and worker2
1).load balsncing:-
   --------------
     Manager# docker service create --name webserver -p 9090:8080 --replicas 5  tomee
2).scaling of container:-
   --------------------
          # docker service scale  appserver=10
3).To remove a node from the docker swarm:-
   --------------------------------------
              1.# docker node update --availability drain   worker1    (manager-stop)
              2.# docker node update --availability active   worker1   (manager-start)
              3.# docker swarm leave    (in node machine(worker))
4).Rolling Updates:-
   ---------------
              1.# docker service create --name myredis --replicas 6 redis:3   (previous version)
              2.# docker service update --image redis:4 myredis               (newly updated version)
              3.# docker service ps myredis | grep Shutdown                   ( We get shutdown container )
              4.# docker service ps myredis | grep -v Shutdown                ( -v used for inverse operation )
              5.#docker service ps myredis                                    (bought containers we got)  

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
1).To add a new machine as a manager:-
==================================
manager # docker swarm  join-token  manager
pest that token in new machine
2).To promote worker1 as a manager node:-
========================================
master# docker node promote Worker1
3).To demote Worker1 and make him back as a worker:-
==================================================
master# docker node demote Worker1







 
